// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Pet_WebService_Autotest.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("pet")]
    [NUnit.Framework.CategoryAttribute("all")]
    [NUnit.Framework.CategoryAttribute("pet")]
    public partial class PetFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "pet.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru"), "pet", "\tАвтотестирование метода /pet\r\n\tОписание метода веб-сервиса находится по адресу: " +
                    "http://petstore.swagger.io/#/pet", ProgrammingLanguage.CSharp, new string[] {
                        "all",
                        "pet"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Добавление нового домашнего животного")]
        [NUnit.Framework.CategoryAttribute("add_pet")]
        [NUnit.Framework.TestCaseAttribute("available", null)]
        [NUnit.Framework.TestCaseAttribute("pending", null)]
        [NUnit.Framework.TestCaseAttribute("sold", null)]
        public virtual void ДобавлениеНовогоДомашнегоЖивотного(string статус, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "add_pet"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Добавление нового домашнего животного", null, @__tags);
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
 testRunner.Given(string.Format("добавляем новое домашнее животное со статусом \"{0}\" и сохраняем его в переменнную" +
                        " \"new_pet\"", статус), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 10
 testRunner.Then("домашнее животное \"new_pet\" существует", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Обновление домашнего животного")]
        [NUnit.Framework.CategoryAttribute("update_pet")]
        [NUnit.Framework.TestCaseAttribute("available", null)]
        [NUnit.Framework.TestCaseAttribute("pending", null)]
        [NUnit.Framework.TestCaseAttribute("sold", null)]
        public virtual void ОбновлениеДомашнегоЖивотного(string статус, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "update_pet"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Обновление домашнего животного", null, @__tags);
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 20
 testRunner.Given(string.Format("добавляем новое домашнее животное со статусом \"{0}\" и сохраняем его в переменнную" +
                        " \"new_pet\"", статус), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 21
 testRunner.And("обновляем домашнее животное \"new_pet\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 22
 testRunner.Then("домашнее животное \"new_pet\" существует", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Удаление домашнего животного")]
        [NUnit.Framework.CategoryAttribute("delete_pet")]
        [NUnit.Framework.TestCaseAttribute("available", null)]
        [NUnit.Framework.TestCaseAttribute("pending", null)]
        [NUnit.Framework.TestCaseAttribute("sold", null)]
        public virtual void УдалениеДомашнегоЖивотного(string статус, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "delete_pet"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Удаление домашнего животного", null, @__tags);
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 32
 testRunner.Given(string.Format("добавляем новое домашнее животное со статусом \"{0}\" и сохраняем его в переменнную" +
                        " \"new_pet\"", статус), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 33
 testRunner.And("удаляем домашнее животное \"new_pet\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 34
 testRunner.Then("домашнее животное \"new_pet\" не существует", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
